{"version":3,"sources":["TitleCard/TitleCard.js","NavTabs/NavTabs.js","MelodyProduction/MelodyProduction.js","Interface/interface.js","App.js","serviceWorker.js","index.js"],"names":["TitleCard","Box","Paper","className","Typography","variant","component","NavTabs","props","square","Tabs","value","view","indicatorColor","textColor","onChange","event","newValue","updateView","aria-label","centered","Tab","label","mm","require","player","Player","melody","MusicRNN","seqList","position","produceMelody","a","Generate","b","c","Promise","all","then","sequences","forEach","currentItem","push","start","Replace","Play","pos","seq","quantizationInfo","stepsPerQuarter","notes","totalQuantizedSteps","resolve","reject","continueSequence","STEPS_PER_PROG","contSeq","note","quantizedStartStep","quantizedEndStep","console","log","Pause","pause","Resume","resume","Button","onClick","Train","About","Container","maxWidth","elevation","Interface","App","useState","setView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48bad957.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TitleCard.css';\r\nimport { Box, Paper, Typography } from '@material-ui/core';\r\n\r\n\r\nexport default function TitleCard(){\r\n    return (\r\n    <Box >\r\n        <Paper>\r\n            <div className=\"title\">\r\n                <Typography variant='h1' component='h1'>Machine Music</Typography>\r\n            </div>\r\n            <div className=\"subtitle\">\r\n            <Typography variant='h4' component='h4'>Procedurally generated music, powered by machine learning</Typography>\r\n            </div>\r\n        </Paper>\r\n    </Box>\r\n    )\r\n}","import React from 'react';\r\nimport { Paper, Tabs, Tab }  from '@material-ui/core';\r\n\r\n\r\nexport default function NavTabs(props) {\r\n\r\n  function handleChange(event, newValue) {\r\n    props.updateView(newValue);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <Paper square>\r\n          <Tabs\r\n              value={props.view}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              onChange={handleChange}\r\n              aria-label=\"nav tabs\"\r\n              centered=\"true\"\r\n          >\r\n              <Tab label=\"Generate\" />\r\n              <Tab label=\"Train\" />\r\n              <Tab label=\"About\" />\r\n          </Tabs>\r\n        </Paper>\r\n    </div>\r\n  );\r\n}","const mm = require(\"@magenta/music\");\r\n\r\nconst player = new mm.Player();\r\nconst melody = new mm.MusicRNN(\r\n  \"https://storage.googleapis.com/magentadata/js/checkpoints/music_rnn/melody_rnn\"\r\n);\r\nlet seqList = [];\r\nlet position = 1;\r\n\r\nexport function produceMelody() {\r\n  const a = Generate();\r\n  const b = Generate();\r\n  const c = Generate();\r\n  Promise.all([a, b, c]).then(sequences => {\r\n    sequences.forEach(currentItem => {\r\n      seqList.push(currentItem);\r\n    });\r\n    player.start(seqList[0]).then(() => {\r\n      Replace(0);\r\n      Play(position);\r\n    });\r\n  });\r\n}\r\n\r\nfunction Play(pos) {\r\n  player.start(seqList[pos]).then(() => {\r\n    Replace(pos);\r\n    position = (pos + 1) % 3;\r\n    Play(position);\r\n  });\r\n}\r\n\r\nfunction Generate() {\r\n  const STEPS_PER_CHORD = 2;\r\n  const STEPS_PER_PROG = 4 * STEPS_PER_CHORD;\r\n  const NUM_REPS = 4;\r\n\r\n  let seq = {\r\n    quantizationInfo: { stepsPerQuarter: 4 },\r\n    notes: [],\r\n    totalQuantizedSteps: 1\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      melody\r\n        .continueSequence(\r\n          seq,\r\n          STEPS_PER_PROG + (NUM_REPS - 1) * STEPS_PER_PROG - 1,\r\n          0.9\r\n        )\r\n        .then(contSeq => {\r\n          contSeq.notes.forEach(note => {\r\n            note.quantizedStartStep += 1;\r\n            note.quantizedEndStep += 1;\r\n            seq.notes.push(note);\r\n          });\r\n          resolve(seq);\r\n        });\r\n    } catch {\r\n      reject(console.log(\"Creation of melody failed.\"));\r\n    }\r\n  });\r\n}\r\n\r\nfunction Replace(pos) {\r\n  let a = Generate();\r\n  a.then(seq => {\r\n    seqList[pos] = seq;\r\n  });\r\n}\r\n\r\nexport function Pause() {\r\n  player.pause();\r\n}\r\nexport function Resume() {\r\n  player.resume();\r\n}\r\n","import React from \"react\";\r\nimport { Typography, Container, Paper, Button } from \"@material-ui/core\";\r\nimport {\r\n  produceMelody,\r\n  Resume,\r\n  Pause\r\n} from \"../MelodyProduction/MelodyProduction\";\r\nimport \"./interface.css\";\r\n\r\nfunction Generate() {\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h1\" component=\"h1\">\r\n        Generate\r\n      </Typography>\r\n      <Button onClick={produceMelody}>ProduceMelody</Button>\r\n      <Button onClick={Pause}>Pause</Button>\r\n      <Button onClick={Resume}>Play</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Train() {\r\n  return (\r\n    <Typography variant=\"h1\" component=\"h1\">\r\n      Train\r\n    </Typography>\r\n  );\r\n}\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"main\">\r\n      <Container maxWidth=\"sm\">\r\n        <Paper className=\"About\" elevation=\"5\">\r\n          <Typography variant=\"h5\" component=\"h5\">\r\n            Machine music was made by Andrew Richardson as a sumbission for my\r\n            final year project.\r\n          </Typography>\r\n          <Typography component=\"p\">\r\n            This app uses some bullshit to convince you that I know how machine\r\n            learning works..\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function Interface(props) {\r\n  switch (props.view) {\r\n    case 0:\r\n      return <Generate />;\r\n    case 1:\r\n      return <Train />;\r\n    case 2:\r\n      return <About />;\r\n    default:\r\n      return <About />;\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TitleCard from './TitleCard/TitleCard';\r\nimport NavTabs from './NavTabs/NavTabs';\r\nimport Interface from './Interface/interface';\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [view , setView] = useState(0);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Header\">\r\n        <TitleCard></TitleCard>\r\n      </div>\r\n      <div className=\"Body\">\r\n        <NavTabs view= {view} updateView= {setView}/>\r\n        <Interface view= {view}></Interface>\r\n      </div> \r\n      <div className=\"Footer\">\r\n\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}